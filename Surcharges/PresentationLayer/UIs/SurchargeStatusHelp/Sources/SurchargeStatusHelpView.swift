//
//  SurchargeStatusHelpView.swift
//  SurchargeStatusHelpDemo
//
//  Created by Bonsung Koo on 23/01/2025.
//  Copyright Â© 2025 Surcharges. All rights reserved.
//

import SwiftUI

import CommonUI
import UIExtensions
import Resources
import Models

public struct SurchargeStatusHelpView: View {
	
	@Environment(\.colorScheme) private var _colorScheme
	
	@Environment(\.dismiss) private var _dismiss
	
	@State private var _contentHeight: CGFloat = 0
	@State private var _presentationIndents: Set<PresentationDetent> = []
	@State private var _selectedPresentationIndents: PresentationDetent = .height(0)
	
	private let _surchargeStatuses: [SurchargeStatus] = [.unknown, .reported, .confirmed, .autoGenerated]
	
	public init() { }
	
	public var body: some View {
		
		VStack(spacing: 0) {
			
			Text(R.string.localizable.tipSurchargeStatusTitle())
				.font(.largeTitle)
				.fontWeight(.bold)
				.padding([.top], 20)
			
			ScrollView(showsIndicators: false) {
				
				VStack(spacing: 30) {
					
					Text("*\(R.string.localizable.surchargeStatusHelpDisclaimer())")
						.multilineTextAlignment(.leading)
						.fontWeight(.bold)
						.padding([.top], 20)
					
					Text(R.string.localizable.surchargeStatusHelpDiscription())
						.frame(maxWidth: .infinity, alignment: .leading)
						.multilineTextAlignment(.leading)
						.font(.headline)
					
					VStack(spacing: 30) {
						
						_surchargeStatusView(status: .unknown)
						
						_surchargeStatusView(status: .reported)
						
						_surchargeStatusView(status: .confirmed)
						
						_surchargeStatusView(status: .autoGenerated)
						
					}
					
					Button {
						_dismiss()
					} label: {
						Text("\(R.string.localizable.gotIt())!ðŸ‘Œ")
							.font(.title3)
					}
					.buttonStyle(.borderedProminent)
				}
			}
			.padding(.horizontal, 20)
		}
		.readSize { size in
			_contentHeight = size.height
		}
		.presentationDetents([.large])
		
	}
	
	@ViewBuilder
	private func _surchargeStatusView(status: SurchargeStatus) -> some View {
		
		VStack(spacing: 15) {
			switch status {
			case .unknown:
				
				Text(R.string.localizable.surchargeStatusUnknown())
					.font(.title3)
					.surchargeStatusUnknown()
				
			case .reported:
				
				Text(R.string.localizable.surchargeStatusReported())
					.font(.title3)
					.surchargeStatusReported()
				
			case .confirmed:
				
				Text(R.string.localizable.surchargeStatusConfirmed())
					.font(.title3)
					.surchargeStatusConfirmed()
				
			case .autoGenerated:
				
				Text(R.string.localizable.surchargeStatusAutoGenerated())
					.font(.title3)
					.surchargeStatusAutoGenerated()
				
			default:
				
				EmptyView()
				
			}
			
			VStack(spacing: 0) {
				_description(status: status)
			}
			
		}
		
	}
	
	@ViewBuilder
	private func _description(status: SurchargeStatus) -> some View {
		
		switch status {
		case .unknown:
			
			Text(R.string.localizable.surchargeStatusHelpUnknown1())
				.frame(maxWidth: .infinity, alignment: .leading)
			
			Text(
				_styledText(
					string: R.string.localizable.surchargeStatusHelpUnknown2(),
					target: R.string.localizable.surchargeStatusHelpUnknown2Emphasise(),
					color: _colorScheme == .light ? R.color.red800.color : R.color.red300.color
				)
			)
			.frame(maxWidth: .infinity, alignment: .leading)
			
		case .reported:
			
			Text(R.string.localizable.surchargeStatusHelpReported1())
				.frame(maxWidth: .infinity, alignment: .leading)
			
			Text(
				_styledText(
					string: R.string.localizable.surchargeStatusHelpReported2(),
					target: R.string.localizable.surchargeStatusHelpReported2Emphasise(),
					color: _colorScheme == .light ? R.color.blue800.color : R.color.blue300.color
				)
			)
			.frame(maxWidth: .infinity, alignment: .leading)
			
		case .confirmed:
			
			Text(R.string.localizable.surchargeStatusHelpConfirmed1())
				.frame(maxWidth: .infinity, alignment: .leading)
			
			Text(
				_styledText(
					string: R.string.localizable.surchargeStatusHelpConfirmed2(),
					target: R.string.localizable.surchargeStatusHelpConfirmed2Emphasise(),
					color: _colorScheme == .light ? R.color.green800.color : R.color.green300.color
				)
			)
			.frame(maxWidth: .infinity, alignment: .leading)
			
		case .autoGenerated:
			Text(R.string.localizable.surchargeStatusHelpAutoGenerated1())
				.frame(maxWidth: .infinity, alignment: .leading)
			
			Text(
				_styledText(
					string: R.string.localizable.surchargeStatusHelpAutoGenerated2(),
					target: R.string.localizable.surchargeStatusHelpAutoGenerated2Emphasise(),
					color: _colorScheme == .light ? R.color.yellow800.color : R.color.yellow300.color
				)
			)
			.frame(maxWidth: .infinity, alignment: .leading)
			
		default:
			
			EmptyView()
			
		}
	}
	
	private func _styledText(string: String, target: String, color: Color) -> AttributedString {
		var attributedString = AttributedString(string)
		if let range = attributedString.range(of: target) {
			attributedString[range].foregroundColor = color
			attributedString[range].font = .system(.body, design: .default).weight(.bold)
		}
		return attributedString
	}
}

#Preview {
	SurchargeStatusHelpView()
}
